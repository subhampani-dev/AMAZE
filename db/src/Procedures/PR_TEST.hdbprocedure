PROCEDURE "PR_APPROVER_UPDATE_ODQ_VALUES"(
	    IN IV_CURRENT_USER VARCHAR(200),
	    IN IV_DELETE_FLAG VARCHAR(10),
	    IN INPUT TABLE(
	      "LAUNCH_ID" NVARCHAR(10),
	      "LAUNCHTYPE" NVARCHAR(1),
	      "ID" NVARCHAR(40),
	      "CSAMAPPROVAL" NVARCHAR(1),
	      "CSIMAPPROVAL" NVARCHAR(1),
	      "SDMAPPROVAL" NVARCHAR(1),
	      "COMMENTS" NVARCHAR(100)
	    ),
	    OUT VALID_RECORDS INTEGER,
	    OUT TOTAL_RECORDS INTEGER,
	    OUT UPDATED_RECORDS INTEGER ,
	    OUT ERROR_CODE INTEGER,
	    OUT ERROR_MSG NVARCHAR(1000),
	    OUT SUCCESS BOOLEAN
	  ) 
	  LANGUAGE SQLSCRIPT 
	  SQL SECURITY INVOKER 
	  --DEFAULT SCHEMA <default_schema_name>
	  ---READS SQL DATA
	  AS 
	BEGIN 
	  /*************************************
	  Write your procedure logic
	  *************************************/
	   DECLARE LV_CURRENTTIME LONGDATE := NOW();
	   DECLARE LV_CURRENT_USER NVARCHAR(255) := '';
	   DECLARE LV_LAUNCH_ID NVARCHAR(5000);
	   DECLARE LV_ID NVARCHAR(5000);
	   DECLARE I INTEGER := 0;
	   DECLARE LV_CSAMAPPROVAL NVARCHAR(1) := '';
	   DECLARE LV_CSIMAPPROVAL NVARCHAR(1) := '';
	   DECLARE LV_SDMAPPROVAL NVARCHAR(1) := '';
	   DECLARE LV_COMMENTS NVARCHAR(100) := '';
	   DECLARE LV_CSAMAPPROVEDBY NVARCHAR(300) := '';
	   DECLARE LV_CSIMAPPROVEDBY NVARCHAR(300) := '';
	   DECLARE LV_SDMAPPROVEDBY NVARCHAR(300) := '';
	  
	   DECLARE INVALID_ENTRIES CONDITION FOR SQL_ERROR_CODE 10001;
	   DECLARE EXIT HANDLER FOR INVALID_ENTRIES
	       SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE INTO ERROR_CODE, ERROR_MSG FROM DUMMY;
	       UPDATED_RECORDS := 0;
	       TOTAL_RECORDS := RECORD_COUNT(:INPUT);
	IF :IV_CURRENT_USER IS NOT NULL AND NOT:IV_CURRENT_USER = '' THEN 
	  LV_CURRENT_USER := :IV_CURRENT_USER;
	ELSE 
	  SELECT TOP 1 VALUE INTO LV_CURRENT_USER DEFAULT NULL FROM M_SESSION_CONTEXT  WHERE CONNECTION_ID=CURRENT_CONNECTION AND KEY ='APPLICATIONUSER' ;
	END IF;
	

	LT_VALID_RECORDS = SELECT B.LAUNCH_ID AS LAUNCH_ID,
	                          B.ID AS ID,
	                          A.CSAMAPPROVAL   AS CSAMAPPROVAL,
	                          A.CSIMAPPROVAL   AS CSIMAPPROVAL,
	                          A.SDMAPPROVAL    AS SDMAPPROVAL,
	                          A.COMMENTS       AS COMMENTS,
	                          CASE WHEN A.CSAMAPPROVAL <> B.CSAMAPPROVAL THEN :LV_CURRENT_USER ELSE B.CSAMAPPROVEDBY   end AS CSAMAPPROVEDBY,
	                          CASE WHEN A.CSIMAPPROVAL <> B.CSIMAPPROVAL THEN :LV_CURRENT_USER ELSE B.CSIMAPPROVEDBY   end AS CSIMAPPROVEDBY,
	                          CASE WHEN A.SDMAPPROVAL <> B.SDMAPPROVAL THEN :LV_CURRENT_USER ELSE B.SDMAPPROVEDBY  end AS SDMAPPROVEDBY                       
	                          FROM :INPUT AS A 
	                          INNER JOIN TB_ODQ_CALCVALUE AS B ON
	                            A.ID = B.ID  AND 
	                            A.LAUNCH_ID = B.LAUNCH_ID;
	VALID_RECORDS := RECORD_COUNT(:LT_VALID_RECORDS);
	IF IS_EMPTY(:LT_VALID_RECORDS) THEN 
	SUCCESS = FALSE;
	SIGNAL INVALID_ENTRIES SET MESSAGE_TEXT = 'No Valid Records found ';
	END IF;
	  
	LT_INVALID_APPROVALS = SELECT * FROM :INPUT 
	                            WHERE ( CSAMAPPROVAL NOT IN ('A', 'R', '') OR 
	                                    CSIMAPPROVAL NOT IN ('A', 'R', '') OR 
	                                    SDMAPPROVAL NOT IN ('A', 'R', ''));
	

	IF RECORD_COUNT(:LT_INVALID_APPROVALS) > 0 THEN
	  VALID_RECORDS := RECORD_COUNT(:LT_VALID_RECORDS) - RECORD_COUNT(:LT_INVALID_APPROVALS);
	  SUCCESS = FALSE;
	  SIGNAL INVALID_ENTRIES SET MESSAGE_TEXT = 'Records found with invalid value for Approvals. Provide A for Approval and R for Rejection';
	END IF;
	

	SELECT TOP 1 LAUNCH_ID INTO LV_LAUNCH_ID FROM :LT_VALID_RECORDS;
	FOR I IN 1..RECORD_COUNT( :LT_VALID_RECORDS ) DO
	    LV_ID := :LT_VALID_RECORDS.ID[I];
	    LV_CSAMAPPROVAL   := :LT_VALID_RECORDS.CSAMAPPROVAL[I];
	    LV_CSIMAPPROVAL   := :LT_VALID_RECORDS.CSIMAPPROVAL[I];
	    LV_SDMAPPROVAL    := :LT_VALID_RECORDS.SDMAPPROVAL[I];
	    LV_CSAMAPPROVEDBY  := :LT_VALID_RECORDS.CSAMAPPROVEDBY[I];
	    LV_CSIMAPPROVEDBY  := :LT_VALID_RECORDS.CSIMAPPROVEDBY[I];
	    LV_SDMAPPROVEDBY   := :LT_VALID_RECORDS.SDMAPPROVEDBY[I];
	    LV_COMMENTS      := :LT_VALID_RECORDS.COMMENTS[I];
	

	

	

	UPDATE TB_ODQ_CALCVALUE
	       SET CSAMAPPROVAL = :LV_CSAMAPPROVAL,
	           CSIMAPPROVAL = :LV_CSIMAPPROVAL,
	           SDMAPPROVAL  = :LV_SDMAPPROVAL,
	           CSAMAPPROVEDBY = :LV_CSAMAPPROVEDBY,
	           CSIMAPPROVEDBY = :LV_CSIMAPPROVEDBY,
	           SDMAPPROVEDBY = :LV_SDMAPPROVEDBY ,
	           COMMENTS     = :LV_COMMENTS,
	           MODIFIEDAT   = :LV_CURRENTTIME,
	           MODIFIEDBY   = :LV_CURRENT_USER
	           WHERE ID = :LV_ID
	           AND LAUNCH_ID = :LV_LAUNCH_ID;
	           UPDATED_RECORDS := :UPDATED_RECORDS + 1;           
	-- END IF;
	END FOR;    
	  IF UPDATED_RECORDS = 0 THEN 
	    SUCCESS = FALSE;
	    SIGNAL INVALID_ENTRIES SET MESSAGE_TEXT = 'No change records are found or updated';
	 END IF;                            
	      
	COMMIT;
	SUCCESS := TRUE;
	END

